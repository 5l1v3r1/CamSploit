using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace ExploitMaker
{
    public static class ConnectionHelper
    {
        public static Stream GetStream(string ip, string port, string msg, int dataLength)
        {
            try
            {
                using (var socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp))
                {
                    socket.Connect(ip, int.Parse(port));
                    socket.Send(Encoding.ASCII.GetBytes(msg));
                    
                    var result = new List<byte>();
                    var left = dataLength;
                    
                    while (left > 0)
                    {
                        var buffer = new byte[1024];
                        var byteCounter = socket.Receive(buffer);

                        if (byteCounter == 0) continue;
                        left = left - byteCounter;
                        result.AddRange(buffer);
                    }
                    
                    var stream = new MemoryStream(result.ToArray());
                    
                    socket.Close();
                    return stream;
                }
            }
            catch (OperationCanceledException)
            {
                //The host is not alive
                return null;
            }
            catch (WebException ex)
            {
                //The host is not alive
                return null;
            }
            catch (EndOfStreamException)
            {
                //The host is not alive
                return null;
            }
            catch (System.Net.Sockets.SocketException)
            {
                //The host is not alive
                return null;
            }
        }

        public static Stream DownloadHttpFile(string ip, string port, string url, int dataLength)
        {
            var request = string.Format(@"GET {0} HTTP/1.1
                          Host: {1}
                          

                          ", url, ip);
            return GetStream(ip, port, request, dataLength);
        }
    }
}