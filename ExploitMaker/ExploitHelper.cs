using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

namespace ExploitMaker
{
    public static class ExploitHelper
    {
        private static List<Exploit> _exploits;
        
        private static void LoadExploits()
        {
            _exploits = new List<Exploit>();
            
            var currentPath = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), "Exploits");
            
            var allAssemblies = Directory.GetFiles(currentPath, "*.dll").Select(Assembly.LoadFile);

            foreach (var assembly in allAssemblies)
            {
                Exploits.AddRange(from t in assembly.GetTypes()
                    where t.BaseType == typeof(Exploit) && t.GetConstructor(Type.EmptyTypes) != null
                    select (Exploit) Activator.CreateInstance(t));
            }
        }
        
        private static List<Exploit> Exploits
        {
            get
            {
                if (_exploits == null)
                    LoadExploits();
                
                return _exploits;
            }
        }
        
        public static IEnumerable<string> GetAllCommonName()
        {
            return Exploits.Select(x => x.CommonName);
        }

        public static Exploit GetExploit(string commonName)
        {
            var r = Exploits.FirstOrDefault(x => x.CommonName == commonName.ToUpper());
            
            if(r != null)
                return r;
            
            throw new ErrorException(Phrases.Invalid_Common_Names);
        }

        public static IEnumerable<Exploit> GetExploits(IEnumerable<string> commonNames)
        {
            return commonNames.Select(GetExploit);
        }

        public static IEnumerable<Exploit> GetAll()
        {
            return Exploits;
        }
    }
}