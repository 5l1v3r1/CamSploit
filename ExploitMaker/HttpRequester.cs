using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using Newtonsoft.Json;

namespace ExploitMaker
{
    public static class HttpRequester
    {
        public static object Get(string url, Dictionary<string, string> cookies = null, bool parseJson = true)
        {
            var request = WebRequest.CreateHttp(url);
            request.Timeout = 10000;
            request.Method = "GET";

            if (cookies != null && cookies.Any())
            {
                request.CookieContainer = new CookieContainer();
                
                foreach (var c in cookies)
                {
                    request.CookieContainer.Add(new Cookie(c.Key, c.Value) {Domain = new Uri(url).Host});
                }
            }

            var text = "";
            try
            {
                var response = (HttpWebResponse) request.GetResponse();
                var respStream = response.GetResponseStream();

                //No response
                if (respStream == null)
                    return null;

                using (var sr = new StreamReader(respStream))
                {
                    text = sr.ReadToEnd();
                    return parseJson ? JsonConvert.DeserializeObject(text) : text;
                }
            }
            catch (JsonReaderException ex)
            {
                //Invalid JSON response, the server is alive but the response is not a JSON
                throw new JsonParserErrorException(ex.Message + " - " + text);
            }
            catch (JsonSerializationException ex)
            {
                //Invalid JSON response, the server is alive but the response is not a JSON
                throw new JsonParserErrorException(ex.Message + " - " + text);
            }
            catch (OperationCanceledException)
            {
                //Invalid HTTP Response
                return null;
            }
            catch (WebException)
            {
                //Invalid HTTP Response
                return null;
            }
        }

        public static object Download(string url, Dictionary<string, string> cookies = null)
        {
            var wc = new WebClient();
            
            if(cookies != null )
                foreach (var cookie in cookies)
                    wc.Headers.Add(HttpRequestHeader.Cookie, cookie.Key+"="+cookie.Value); 

            var bytes = wc.DownloadData(url);
            return new MemoryStream(bytes);
        }
    }
}
